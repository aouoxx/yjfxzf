/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.supconit.kqfx.web.device.entities;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Redis_DeviceData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Redis_DeviceData\",\"namespace\":\"com.supconit.kqfx.web.device.entities\",\"fields\":[{\"name\":\"deviceKey\",\"type\":\"string\"},{\"name\":\"indexCode\",\"type\":\"string\"},{\"name\":\"deviceState\",\"type\":\"string\"},{\"name\":\"exceptionReason\",\"type\":\"string\"},{\"name\":\"checkTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence deviceKey;
  @Deprecated public CharSequence indexCode;
  @Deprecated public CharSequence deviceState;
  @Deprecated public CharSequence exceptionReason;
  @Deprecated public CharSequence checkTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Redis_DeviceData() {}

  /**
   * All-args constructor.
   */
  public Redis_DeviceData(CharSequence deviceKey, CharSequence indexCode, CharSequence deviceState, CharSequence exceptionReason, CharSequence checkTime) {
    this.deviceKey = deviceKey;
    this.indexCode = indexCode;
    this.deviceState = deviceState;
    this.exceptionReason = exceptionReason;
    this.checkTime = checkTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return deviceKey;
    case 1: return indexCode;
    case 2: return deviceState;
    case 3: return exceptionReason;
    case 4: return checkTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: deviceKey = (CharSequence)value$; break;
    case 1: indexCode = (CharSequence)value$; break;
    case 2: deviceState = (CharSequence)value$; break;
    case 3: exceptionReason = (CharSequence)value$; break;
    case 4: checkTime = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'deviceKey' field.
   */
  public CharSequence getDeviceKey() {
    return deviceKey;
  }

  /**
   * Sets the value of the 'deviceKey' field.
   * @param value the value to set.
   */
  public void setDeviceKey(CharSequence value) {
    this.deviceKey = value;
  }

  /**
   * Gets the value of the 'indexCode' field.
   */
  public CharSequence getIndexCode() {
    return indexCode;
  }

  /**
   * Sets the value of the 'indexCode' field.
   * @param value the value to set.
   */
  public void setIndexCode(CharSequence value) {
    this.indexCode = value;
  }

  /**
   * Gets the value of the 'deviceState' field.
   */
  public CharSequence getDeviceState() {
    return deviceState;
  }

  /**
   * Sets the value of the 'deviceState' field.
   * @param value the value to set.
   */
  public void setDeviceState(CharSequence value) {
    this.deviceState = value;
  }

  /**
   * Gets the value of the 'exceptionReason' field.
   */
  public CharSequence getExceptionReason() {
    return exceptionReason;
  }

  /**
   * Sets the value of the 'exceptionReason' field.
   * @param value the value to set.
   */
  public void setExceptionReason(CharSequence value) {
    this.exceptionReason = value;
  }

  /**
   * Gets the value of the 'checkTime' field.
   */
  public CharSequence getCheckTime() {
    return checkTime;
  }

  /**
   * Sets the value of the 'checkTime' field.
   * @param value the value to set.
   */
  public void setCheckTime(CharSequence value) {
    this.checkTime = value;
  }

  /** Creates a new Redis_DeviceData RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new Redis_DeviceData RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new Redis_DeviceData RecordBuilder by copying an existing Redis_DeviceData instance */
  public static Builder newBuilder(Redis_DeviceData other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for Redis_DeviceData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Redis_DeviceData>
    implements org.apache.avro.data.RecordBuilder<Redis_DeviceData> {

    private CharSequence deviceKey;
    private CharSequence indexCode;
    private CharSequence deviceState;
    private CharSequence exceptionReason;
    private CharSequence checkTime;

    /** Creates a new Builder */
    private Builder() {
      super(Redis_DeviceData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.deviceKey)) {
        this.deviceKey = data().deepCopy(fields()[0].schema(), other.deviceKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.indexCode)) {
        this.indexCode = data().deepCopy(fields()[1].schema(), other.indexCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceState)) {
        this.deviceState = data().deepCopy(fields()[2].schema(), other.deviceState);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exceptionReason)) {
        this.exceptionReason = data().deepCopy(fields()[3].schema(), other.exceptionReason);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.checkTime)) {
        this.checkTime = data().deepCopy(fields()[4].schema(), other.checkTime);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Redis_DeviceData instance */
    private Builder(Redis_DeviceData other) {
            super(Redis_DeviceData.SCHEMA$);
      if (isValidValue(fields()[0], other.deviceKey)) {
        this.deviceKey = data().deepCopy(fields()[0].schema(), other.deviceKey);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.indexCode)) {
        this.indexCode = data().deepCopy(fields()[1].schema(), other.indexCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceState)) {
        this.deviceState = data().deepCopy(fields()[2].schema(), other.deviceState);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.exceptionReason)) {
        this.exceptionReason = data().deepCopy(fields()[3].schema(), other.exceptionReason);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.checkTime)) {
        this.checkTime = data().deepCopy(fields()[4].schema(), other.checkTime);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'deviceKey' field */
    public CharSequence getDeviceKey() {
      return deviceKey;
    }
    
    /** Sets the value of the 'deviceKey' field */
    public Builder setDeviceKey(CharSequence value) {
      validate(fields()[0], value);
      this.deviceKey = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'deviceKey' field has been set */
    public boolean hasDeviceKey() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'deviceKey' field */
    public Builder clearDeviceKey() {
      deviceKey = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'indexCode' field */
    public CharSequence getIndexCode() {
      return indexCode;
    }
    
    /** Sets the value of the 'indexCode' field */
    public Builder setIndexCode(CharSequence value) {
      validate(fields()[1], value);
      this.indexCode = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'indexCode' field has been set */
    public boolean hasIndexCode() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'indexCode' field */
    public Builder clearIndexCode() {
      indexCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'deviceState' field */
    public CharSequence getDeviceState() {
      return deviceState;
    }
    
    /** Sets the value of the 'deviceState' field */
    public Builder setDeviceState(CharSequence value) {
      validate(fields()[2], value);
      this.deviceState = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'deviceState' field has been set */
    public boolean hasDeviceState() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'deviceState' field */
    public Builder clearDeviceState() {
      deviceState = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'exceptionReason' field */
    public CharSequence getExceptionReason() {
      return exceptionReason;
    }
    
    /** Sets the value of the 'exceptionReason' field */
    public Builder setExceptionReason(CharSequence value) {
      validate(fields()[3], value);
      this.exceptionReason = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'exceptionReason' field has been set */
    public boolean hasExceptionReason() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'exceptionReason' field */
    public Builder clearExceptionReason() {
      exceptionReason = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'checkTime' field */
    public CharSequence getCheckTime() {
      return checkTime;
    }
    
    /** Sets the value of the 'checkTime' field */
    public Builder setCheckTime(CharSequence value) {
      validate(fields()[4], value);
      this.checkTime = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'checkTime' field has been set */
    public boolean hasCheckTime() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'checkTime' field */
    public Builder clearCheckTime() {
      checkTime = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Redis_DeviceData build() {
      try {
        Redis_DeviceData record = new Redis_DeviceData();
        record.deviceKey = fieldSetFlags()[0] ? this.deviceKey : (CharSequence) defaultValue(fields()[0]);
        record.indexCode = fieldSetFlags()[1] ? this.indexCode : (CharSequence) defaultValue(fields()[1]);
        record.deviceState = fieldSetFlags()[2] ? this.deviceState : (CharSequence) defaultValue(fields()[2]);
        record.exceptionReason = fieldSetFlags()[3] ? this.exceptionReason : (CharSequence) defaultValue(fields()[3]);
        record.checkTime = fieldSetFlags()[4] ? this.checkTime : (CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
