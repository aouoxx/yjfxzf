/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.supconit.kqfx.web.fxzf.avro;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class qbbItemInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"qbbItemInfo\",\"namespace\":\"com.supconit.kqfx.web.fxzf.avro\",\"fields\":[{\"name\":\"sCnt\",\"type\":\"string\"},{\"name\":\"sWay\",\"type\":\"string\"},{\"name\":\"sFont\",\"type\":\"string\"},{\"name\":\"sDelay\",\"type\":\"string\"},{\"name\":\"sSpeed\",\"type\":\"string\"},{\"name\":\"sColor\",\"type\":\"string\"},{\"name\":\"sDataType\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence sCnt;
  @Deprecated public CharSequence sWay;
  @Deprecated public CharSequence sFont;
  @Deprecated public CharSequence sDelay;
  @Deprecated public CharSequence sSpeed;
  @Deprecated public CharSequence sColor;
  @Deprecated public CharSequence sDataType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public qbbItemInfo() {}

  /**
   * All-args constructor.
   */
  public qbbItemInfo(CharSequence sCnt, CharSequence sWay, CharSequence sFont, CharSequence sDelay, CharSequence sSpeed, CharSequence sColor, CharSequence sDataType) {
    this.sCnt = sCnt;
    this.sWay = sWay;
    this.sFont = sFont;
    this.sDelay = sDelay;
    this.sSpeed = sSpeed;
    this.sColor = sColor;
    this.sDataType = sDataType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return sCnt;
    case 1: return sWay;
    case 2: return sFont;
    case 3: return sDelay;
    case 4: return sSpeed;
    case 5: return sColor;
    case 6: return sDataType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: sCnt = (CharSequence)value$; break;
    case 1: sWay = (CharSequence)value$; break;
    case 2: sFont = (CharSequence)value$; break;
    case 3: sDelay = (CharSequence)value$; break;
    case 4: sSpeed = (CharSequence)value$; break;
    case 5: sColor = (CharSequence)value$; break;
    case 6: sDataType = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sCnt' field.
   */
  public CharSequence getSCnt() {
    return sCnt;
  }

  /**
   * Sets the value of the 'sCnt' field.
   * @param value the value to set.
   */
  public void setSCnt(CharSequence value) {
    this.sCnt = value;
  }

  /**
   * Gets the value of the 'sWay' field.
   */
  public CharSequence getSWay() {
    return sWay;
  }

  /**
   * Sets the value of the 'sWay' field.
   * @param value the value to set.
   */
  public void setSWay(CharSequence value) {
    this.sWay = value;
  }

  /**
   * Gets the value of the 'sFont' field.
   */
  public CharSequence getSFont() {
    return sFont;
  }

  /**
   * Sets the value of the 'sFont' field.
   * @param value the value to set.
   */
  public void setSFont(CharSequence value) {
    this.sFont = value;
  }

  /**
   * Gets the value of the 'sDelay' field.
   */
  public CharSequence getSDelay() {
    return sDelay;
  }

  /**
   * Sets the value of the 'sDelay' field.
   * @param value the value to set.
   */
  public void setSDelay(CharSequence value) {
    this.sDelay = value;
  }

  /**
   * Gets the value of the 'sSpeed' field.
   */
  public CharSequence getSSpeed() {
    return sSpeed;
  }

  /**
   * Sets the value of the 'sSpeed' field.
   * @param value the value to set.
   */
  public void setSSpeed(CharSequence value) {
    this.sSpeed = value;
  }

  /**
   * Gets the value of the 'sColor' field.
   */
  public CharSequence getSColor() {
    return sColor;
  }

  /**
   * Sets the value of the 'sColor' field.
   * @param value the value to set.
   */
  public void setSColor(CharSequence value) {
    this.sColor = value;
  }

  /**
   * Gets the value of the 'sDataType' field.
   */
  public CharSequence getSDataType() {
    return sDataType;
  }

  /**
   * Sets the value of the 'sDataType' field.
   * @param value the value to set.
   */
  public void setSDataType(CharSequence value) {
    this.sDataType = value;
  }

  /** Creates a new qbbItemInfo RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new qbbItemInfo RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new qbbItemInfo RecordBuilder by copying an existing qbbItemInfo instance */
  public static Builder newBuilder(qbbItemInfo other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for qbbItemInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<qbbItemInfo>
    implements org.apache.avro.data.RecordBuilder<qbbItemInfo> {

    private CharSequence sCnt;
    private CharSequence sWay;
    private CharSequence sFont;
    private CharSequence sDelay;
    private CharSequence sSpeed;
    private CharSequence sColor;
    private CharSequence sDataType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sCnt)) {
        this.sCnt = data().deepCopy(fields()[0].schema(), other.sCnt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sWay)) {
        this.sWay = data().deepCopy(fields()[1].schema(), other.sWay);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sFont)) {
        this.sFont = data().deepCopy(fields()[2].schema(), other.sFont);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sDelay)) {
        this.sDelay = data().deepCopy(fields()[3].schema(), other.sDelay);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sSpeed)) {
        this.sSpeed = data().deepCopy(fields()[4].schema(), other.sSpeed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sColor)) {
        this.sColor = data().deepCopy(fields()[5].schema(), other.sColor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sDataType)) {
        this.sDataType = data().deepCopy(fields()[6].schema(), other.sDataType);
        fieldSetFlags()[6] = true;
      }
    }
    
    /** Creates a Builder by copying an existing qbbItemInfo instance */
    private Builder(qbbItemInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sCnt)) {
        this.sCnt = data().deepCopy(fields()[0].schema(), other.sCnt);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sWay)) {
        this.sWay = data().deepCopy(fields()[1].schema(), other.sWay);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sFont)) {
        this.sFont = data().deepCopy(fields()[2].schema(), other.sFont);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sDelay)) {
        this.sDelay = data().deepCopy(fields()[3].schema(), other.sDelay);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sSpeed)) {
        this.sSpeed = data().deepCopy(fields()[4].schema(), other.sSpeed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sColor)) {
        this.sColor = data().deepCopy(fields()[5].schema(), other.sColor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sDataType)) {
        this.sDataType = data().deepCopy(fields()[6].schema(), other.sDataType);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'sCnt' field */
    public CharSequence getSCnt() {
      return sCnt;
    }
    
    /** Sets the value of the 'sCnt' field */
    public Builder setSCnt(CharSequence value) {
      validate(fields()[0], value);
      this.sCnt = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sCnt' field has been set */
    public boolean hasSCnt() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sCnt' field */
    public Builder clearSCnt() {
      sCnt = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sWay' field */
    public CharSequence getSWay() {
      return sWay;
    }
    
    /** Sets the value of the 'sWay' field */
    public Builder setSWay(CharSequence value) {
      validate(fields()[1], value);
      this.sWay = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sWay' field has been set */
    public boolean hasSWay() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sWay' field */
    public Builder clearSWay() {
      sWay = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sFont' field */
    public CharSequence getSFont() {
      return sFont;
    }
    
    /** Sets the value of the 'sFont' field */
    public Builder setSFont(CharSequence value) {
      validate(fields()[2], value);
      this.sFont = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sFont' field has been set */
    public boolean hasSFont() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sFont' field */
    public Builder clearSFont() {
      sFont = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'sDelay' field */
    public CharSequence getSDelay() {
      return sDelay;
    }
    
    /** Sets the value of the 'sDelay' field */
    public Builder setSDelay(CharSequence value) {
      validate(fields()[3], value);
      this.sDelay = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'sDelay' field has been set */
    public boolean hasSDelay() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'sDelay' field */
    public Builder clearSDelay() {
      sDelay = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sSpeed' field */
    public CharSequence getSSpeed() {
      return sSpeed;
    }
    
    /** Sets the value of the 'sSpeed' field */
    public Builder setSSpeed(CharSequence value) {
      validate(fields()[4], value);
      this.sSpeed = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sSpeed' field has been set */
    public boolean hasSSpeed() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sSpeed' field */
    public Builder clearSSpeed() {
      sSpeed = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'sColor' field */
    public CharSequence getSColor() {
      return sColor;
    }
    
    /** Sets the value of the 'sColor' field */
    public Builder setSColor(CharSequence value) {
      validate(fields()[5], value);
      this.sColor = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'sColor' field has been set */
    public boolean hasSColor() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'sColor' field */
    public Builder clearSColor() {
      sColor = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sDataType' field */
    public CharSequence getSDataType() {
      return sDataType;
    }
    
    /** Sets the value of the 'sDataType' field */
    public Builder setSDataType(CharSequence value) {
      validate(fields()[6], value);
      this.sDataType = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sDataType' field has been set */
    public boolean hasSDataType() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sDataType' field */
    public Builder clearSDataType() {
      sDataType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public qbbItemInfo build() {
      try {
        qbbItemInfo record = new qbbItemInfo();
        record.sCnt = fieldSetFlags()[0] ? this.sCnt : (CharSequence) defaultValue(fields()[0]);
        record.sWay = fieldSetFlags()[1] ? this.sWay : (CharSequence) defaultValue(fields()[1]);
        record.sFont = fieldSetFlags()[2] ? this.sFont : (CharSequence) defaultValue(fields()[2]);
        record.sDelay = fieldSetFlags()[3] ? this.sDelay : (CharSequence) defaultValue(fields()[3]);
        record.sSpeed = fieldSetFlags()[4] ? this.sSpeed : (CharSequence) defaultValue(fields()[4]);
        record.sColor = fieldSetFlags()[5] ? this.sColor : (CharSequence) defaultValue(fields()[5]);
        record.sDataType = fieldSetFlags()[6] ? this.sDataType : (CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
