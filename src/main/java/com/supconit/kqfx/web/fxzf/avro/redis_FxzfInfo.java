/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.supconit.kqfx.web.fxzf.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class redis_FxzfInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"redis_FxzfInfo\",\"namespace\":\"com.supconit.kqfx.web.fxzf.avro\",\"fields\":[{\"name\":\"sDetectStation\",\"type\":\"string\"},{\"name\":\"sLane\",\"type\":\"string\"},{\"name\":\"sWeight\",\"type\":\"string\"},{\"name\":\"sSpeed\",\"type\":\"string\"},{\"name\":\"sAxisCount\",\"type\":\"string\"},{\"name\":\"sOverloadStatus\",\"type\":\"string\"},{\"name\":\"sOverloadPercent\",\"type\":\"string\"},{\"name\":\"sCarModel\",\"type\":\"string\"},{\"name\":\"sCaptureTime\",\"type\":\"string\"},{\"name\":\"sCarDirection\",\"type\":\"string\"},{\"name\":\"sHeadLicense\",\"type\":\"string\"},{\"name\":\"sHeadLicensePicDir\",\"type\":\"string\"},{\"name\":\"sHeadCarPicDir\",\"type\":\"string\"},{\"name\":\"sHeadLicenseZxd\",\"type\":\"string\"},{\"name\":\"sHeadLicenseColor\",\"type\":\"string\"},{\"name\":\"sTailLicense\",\"type\":\"string\"},{\"name\":\"sTailLicensePicDir\",\"type\":\"string\"},{\"name\":\"sTailCarPicDir\",\"type\":\"string\"},{\"name\":\"sTailLicenseZxd\",\"type\":\"string\"},{\"name\":\"sTailLicenseColor\",\"type\":\"string\"},{\"name\":\"sCarLength\",\"type\":\"string\"},{\"name\":\"sCarWidth\",\"type\":\"string\"},{\"name\":\"sCarHeight\",\"type\":\"string\"},{\"name\":\"sOverWeight\",\"type\":\"string\"},{\"name\":\"sMaxWheelBase\",\"type\":\"string\"},{\"name\":\"sAxisWeight\",\"type\":\"string\"},{\"name\":\"sParameter3\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence sDetectStation;
  @Deprecated public CharSequence sLane;
  @Deprecated public CharSequence sWeight;
  @Deprecated public CharSequence sSpeed;
  @Deprecated public CharSequence sAxisCount;
  @Deprecated public CharSequence sOverloadStatus;
  @Deprecated public CharSequence sOverloadPercent;
  @Deprecated public CharSequence sCarModel;
  @Deprecated public CharSequence sCaptureTime;
  @Deprecated public CharSequence sCarDirection;
  @Deprecated public CharSequence sHeadLicense;
  @Deprecated public CharSequence sHeadLicensePicDir;
  @Deprecated public CharSequence sHeadCarPicDir;
  @Deprecated public CharSequence sHeadLicenseZxd;
  @Deprecated public CharSequence sHeadLicenseColor;
  @Deprecated public CharSequence sTailLicense;
  @Deprecated public CharSequence sTailLicensePicDir;
  @Deprecated public CharSequence sTailCarPicDir;
  @Deprecated public CharSequence sTailLicenseZxd;
  @Deprecated public CharSequence sTailLicenseColor;
  @Deprecated public CharSequence sCarLength;
  @Deprecated public CharSequence sCarWidth;
  @Deprecated public CharSequence sCarHeight;
  @Deprecated public CharSequence sOverWeight;
  @Deprecated public CharSequence sMaxWheelBase;
  @Deprecated public CharSequence sAxisWeight;
  @Deprecated public CharSequence sParameter3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public redis_FxzfInfo() {}

  /**
   * All-args constructor.
   */
  public redis_FxzfInfo(CharSequence sDetectStation, CharSequence sLane, CharSequence sWeight, CharSequence sSpeed, CharSequence sAxisCount, CharSequence sOverloadStatus, CharSequence sOverloadPercent, CharSequence sCarModel, CharSequence sCaptureTime, CharSequence sCarDirection, CharSequence sHeadLicense, CharSequence sHeadLicensePicDir, CharSequence sHeadCarPicDir, CharSequence sHeadLicenseZxd, CharSequence sHeadLicenseColor, CharSequence sTailLicense, CharSequence sTailLicensePicDir, CharSequence sTailCarPicDir, CharSequence sTailLicenseZxd, CharSequence sTailLicenseColor, CharSequence sCarLength, CharSequence sCarWidth, CharSequence sCarHeight, CharSequence sOverWeight, CharSequence sMaxWheelBase, CharSequence sAxisWeight, CharSequence sParameter3) {
    this.sDetectStation = sDetectStation;
    this.sLane = sLane;
    this.sWeight = sWeight;
    this.sSpeed = sSpeed;
    this.sAxisCount = sAxisCount;
    this.sOverloadStatus = sOverloadStatus;
    this.sOverloadPercent = sOverloadPercent;
    this.sCarModel = sCarModel;
    this.sCaptureTime = sCaptureTime;
    this.sCarDirection = sCarDirection;
    this.sHeadLicense = sHeadLicense;
    this.sHeadLicensePicDir = sHeadLicensePicDir;
    this.sHeadCarPicDir = sHeadCarPicDir;
    this.sHeadLicenseZxd = sHeadLicenseZxd;
    this.sHeadLicenseColor = sHeadLicenseColor;
    this.sTailLicense = sTailLicense;
    this.sTailLicensePicDir = sTailLicensePicDir;
    this.sTailCarPicDir = sTailCarPicDir;
    this.sTailLicenseZxd = sTailLicenseZxd;
    this.sTailLicenseColor = sTailLicenseColor;
    this.sCarLength = sCarLength;
    this.sCarWidth = sCarWidth;
    this.sCarHeight = sCarHeight;
    this.sOverWeight = sOverWeight;
    this.sMaxWheelBase = sMaxWheelBase;
    this.sAxisWeight = sAxisWeight;
    this.sParameter3 = sParameter3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return sDetectStation;
    case 1: return sLane;
    case 2: return sWeight;
    case 3: return sSpeed;
    case 4: return sAxisCount;
    case 5: return sOverloadStatus;
    case 6: return sOverloadPercent;
    case 7: return sCarModel;
    case 8: return sCaptureTime;
    case 9: return sCarDirection;
    case 10: return sHeadLicense;
    case 11: return sHeadLicensePicDir;
    case 12: return sHeadCarPicDir;
    case 13: return sHeadLicenseZxd;
    case 14: return sHeadLicenseColor;
    case 15: return sTailLicense;
    case 16: return sTailLicensePicDir;
    case 17: return sTailCarPicDir;
    case 18: return sTailLicenseZxd;
    case 19: return sTailLicenseColor;
    case 20: return sCarLength;
    case 21: return sCarWidth;
    case 22: return sCarHeight;
    case 23: return sOverWeight;
    case 24: return sMaxWheelBase;
    case 25: return sAxisWeight;
    case 26: return sParameter3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: sDetectStation = (CharSequence)value$; break;
    case 1: sLane = (CharSequence)value$; break;
    case 2: sWeight = (CharSequence)value$; break;
    case 3: sSpeed = (CharSequence)value$; break;
    case 4: sAxisCount = (CharSequence)value$; break;
    case 5: sOverloadStatus = (CharSequence)value$; break;
    case 6: sOverloadPercent = (CharSequence)value$; break;
    case 7: sCarModel = (CharSequence)value$; break;
    case 8: sCaptureTime = (CharSequence)value$; break;
    case 9: sCarDirection = (CharSequence)value$; break;
    case 10: sHeadLicense = (CharSequence)value$; break;
    case 11: sHeadLicensePicDir = (CharSequence)value$; break;
    case 12: sHeadCarPicDir = (CharSequence)value$; break;
    case 13: sHeadLicenseZxd = (CharSequence)value$; break;
    case 14: sHeadLicenseColor = (CharSequence)value$; break;
    case 15: sTailLicense = (CharSequence)value$; break;
    case 16: sTailLicensePicDir = (CharSequence)value$; break;
    case 17: sTailCarPicDir = (CharSequence)value$; break;
    case 18: sTailLicenseZxd = (CharSequence)value$; break;
    case 19: sTailLicenseColor = (CharSequence)value$; break;
    case 20: sCarLength = (CharSequence)value$; break;
    case 21: sCarWidth = (CharSequence)value$; break;
    case 22: sCarHeight = (CharSequence)value$; break;
    case 23: sOverWeight = (CharSequence)value$; break;
    case 24: sMaxWheelBase = (CharSequence)value$; break;
    case 25: sAxisWeight = (CharSequence)value$; break;
    case 26: sParameter3 = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sDetectStation' field.
   */
  public CharSequence getSDetectStation() {
    return sDetectStation;
  }

  /**
   * Sets the value of the 'sDetectStation' field.
   * @param value the value to set.
   */
  public void setSDetectStation(CharSequence value) {
    this.sDetectStation = value;
  }

  /**
   * Gets the value of the 'sLane' field.
   */
  public CharSequence getSLane() {
    return sLane;
  }

  /**
   * Sets the value of the 'sLane' field.
   * @param value the value to set.
   */
  public void setSLane(CharSequence value) {
    this.sLane = value;
  }

  /**
   * Gets the value of the 'sWeight' field.
   */
  public CharSequence getSWeight() {
    return sWeight;
  }

  /**
   * Sets the value of the 'sWeight' field.
   * @param value the value to set.
   */
  public void setSWeight(CharSequence value) {
    this.sWeight = value;
  }

  /**
   * Gets the value of the 'sSpeed' field.
   */
  public CharSequence getSSpeed() {
    return sSpeed;
  }

  /**
   * Sets the value of the 'sSpeed' field.
   * @param value the value to set.
   */
  public void setSSpeed(CharSequence value) {
    this.sSpeed = value;
  }

  /**
   * Gets the value of the 'sAxisCount' field.
   */
  public CharSequence getSAxisCount() {
    return sAxisCount;
  }

  /**
   * Sets the value of the 'sAxisCount' field.
   * @param value the value to set.
   */
  public void setSAxisCount(CharSequence value) {
    this.sAxisCount = value;
  }

  /**
   * Gets the value of the 'sOverloadStatus' field.
   */
  public CharSequence getSOverloadStatus() {
    return sOverloadStatus;
  }

  /**
   * Sets the value of the 'sOverloadStatus' field.
   * @param value the value to set.
   */
  public void setSOverloadStatus(CharSequence value) {
    this.sOverloadStatus = value;
  }

  /**
   * Gets the value of the 'sOverloadPercent' field.
   */
  public CharSequence getSOverloadPercent() {
    return sOverloadPercent;
  }

  /**
   * Sets the value of the 'sOverloadPercent' field.
   * @param value the value to set.
   */
  public void setSOverloadPercent(CharSequence value) {
    this.sOverloadPercent = value;
  }

  /**
   * Gets the value of the 'sCarModel' field.
   */
  public CharSequence getSCarModel() {
    return sCarModel;
  }

  /**
   * Sets the value of the 'sCarModel' field.
   * @param value the value to set.
   */
  public void setSCarModel(CharSequence value) {
    this.sCarModel = value;
  }

  /**
   * Gets the value of the 'sCaptureTime' field.
   */
  public CharSequence getSCaptureTime() {
    return sCaptureTime;
  }

  /**
   * Sets the value of the 'sCaptureTime' field.
   * @param value the value to set.
   */
  public void setSCaptureTime(CharSequence value) {
    this.sCaptureTime = value;
  }

  /**
   * Gets the value of the 'sCarDirection' field.
   */
  public CharSequence getSCarDirection() {
    return sCarDirection;
  }

  /**
   * Sets the value of the 'sCarDirection' field.
   * @param value the value to set.
   */
  public void setSCarDirection(CharSequence value) {
    this.sCarDirection = value;
  }

  /**
   * Gets the value of the 'sHeadLicense' field.
   */
  public CharSequence getSHeadLicense() {
    return sHeadLicense;
  }

  /**
   * Sets the value of the 'sHeadLicense' field.
   * @param value the value to set.
   */
  public void setSHeadLicense(CharSequence value) {
    this.sHeadLicense = value;
  }

  /**
   * Gets the value of the 'sHeadLicensePicDir' field.
   */
  public CharSequence getSHeadLicensePicDir() {
    return sHeadLicensePicDir;
  }

  /**
   * Sets the value of the 'sHeadLicensePicDir' field.
   * @param value the value to set.
   */
  public void setSHeadLicensePicDir(CharSequence value) {
    this.sHeadLicensePicDir = value;
  }

  /**
   * Gets the value of the 'sHeadCarPicDir' field.
   */
  public CharSequence getSHeadCarPicDir() {
    return sHeadCarPicDir;
  }

  /**
   * Sets the value of the 'sHeadCarPicDir' field.
   * @param value the value to set.
   */
  public void setSHeadCarPicDir(CharSequence value) {
    this.sHeadCarPicDir = value;
  }

  /**
   * Gets the value of the 'sHeadLicenseZxd' field.
   */
  public CharSequence getSHeadLicenseZxd() {
    return sHeadLicenseZxd;
  }

  /**
   * Sets the value of the 'sHeadLicenseZxd' field.
   * @param value the value to set.
   */
  public void setSHeadLicenseZxd(CharSequence value) {
    this.sHeadLicenseZxd = value;
  }

  /**
   * Gets the value of the 'sHeadLicenseColor' field.
   */
  public CharSequence getSHeadLicenseColor() {
    return sHeadLicenseColor;
  }

  /**
   * Sets the value of the 'sHeadLicenseColor' field.
   * @param value the value to set.
   */
  public void setSHeadLicenseColor(CharSequence value) {
    this.sHeadLicenseColor = value;
  }

  /**
   * Gets the value of the 'sTailLicense' field.
   */
  public CharSequence getSTailLicense() {
    return sTailLicense;
  }

  /**
   * Sets the value of the 'sTailLicense' field.
   * @param value the value to set.
   */
  public void setSTailLicense(CharSequence value) {
    this.sTailLicense = value;
  }

  /**
   * Gets the value of the 'sTailLicensePicDir' field.
   */
  public CharSequence getSTailLicensePicDir() {
    return sTailLicensePicDir;
  }

  /**
   * Sets the value of the 'sTailLicensePicDir' field.
   * @param value the value to set.
   */
  public void setSTailLicensePicDir(CharSequence value) {
    this.sTailLicensePicDir = value;
  }

  /**
   * Gets the value of the 'sTailCarPicDir' field.
   */
  public CharSequence getSTailCarPicDir() {
    return sTailCarPicDir;
  }

  /**
   * Sets the value of the 'sTailCarPicDir' field.
   * @param value the value to set.
   */
  public void setSTailCarPicDir(CharSequence value) {
    this.sTailCarPicDir = value;
  }

  /**
   * Gets the value of the 'sTailLicenseZxd' field.
   */
  public CharSequence getSTailLicenseZxd() {
    return sTailLicenseZxd;
  }

  /**
   * Sets the value of the 'sTailLicenseZxd' field.
   * @param value the value to set.
   */
  public void setSTailLicenseZxd(CharSequence value) {
    this.sTailLicenseZxd = value;
  }

  /**
   * Gets the value of the 'sTailLicenseColor' field.
   */
  public CharSequence getSTailLicenseColor() {
    return sTailLicenseColor;
  }

  /**
   * Sets the value of the 'sTailLicenseColor' field.
   * @param value the value to set.
   */
  public void setSTailLicenseColor(CharSequence value) {
    this.sTailLicenseColor = value;
  }

  /**
   * Gets the value of the 'sCarLength' field.
   */
  public CharSequence getSCarLength() {
    return sCarLength;
  }

  /**
   * Sets the value of the 'sCarLength' field.
   * @param value the value to set.
   */
  public void setSCarLength(CharSequence value) {
    this.sCarLength = value;
  }

  /**
   * Gets the value of the 'sCarWidth' field.
   */
  public CharSequence getSCarWidth() {
    return sCarWidth;
  }

  /**
   * Sets the value of the 'sCarWidth' field.
   * @param value the value to set.
   */
  public void setSCarWidth(CharSequence value) {
    this.sCarWidth = value;
  }

  /**
   * Gets the value of the 'sCarHeight' field.
   */
  public CharSequence getSCarHeight() {
    return sCarHeight;
  }

  /**
   * Sets the value of the 'sCarHeight' field.
   * @param value the value to set.
   */
  public void setSCarHeight(CharSequence value) {
    this.sCarHeight = value;
  }

  /**
   * Gets the value of the 'sOverWeight' field.
   */
  public CharSequence getSOverWeight() {
    return sOverWeight;
  }

  /**
   * Sets the value of the 'sOverWeight' field.
   * @param value the value to set.
   */
  public void setSOverWeight(CharSequence value) {
    this.sOverWeight = value;
  }

  /**
   * Gets the value of the 'sMaxWheelBase' field.
   */
  public CharSequence getSMaxWheelBase() {
    return sMaxWheelBase;
  }

  /**
   * Sets the value of the 'sMaxWheelBase' field.
   * @param value the value to set.
   */
  public void setSMaxWheelBase(CharSequence value) {
    this.sMaxWheelBase = value;
  }

  /**
   * Gets the value of the 'sAxisWeight' field.
   */
  public CharSequence getSAxisWeight() {
    return sAxisWeight;
  }

  /**
   * Sets the value of the 'sAxisWeight' field.
   * @param value the value to set.
   */
  public void setSAxisWeight(CharSequence value) {
    this.sAxisWeight = value;
  }

  /**
   * Gets the value of the 'sParameter3' field.
   */
  public CharSequence getSParameter3() {
    return sParameter3;
  }

  /**
   * Sets the value of the 'sParameter3' field.
   * @param value the value to set.
   */
  public void setSParameter3(CharSequence value) {
    this.sParameter3 = value;
  }

  /** Creates a new redis_FxzfInfo RecordBuilder */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /** Creates a new redis_FxzfInfo RecordBuilder by copying an existing Builder */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /** Creates a new redis_FxzfInfo RecordBuilder by copying an existing redis_FxzfInfo instance */
  public static Builder newBuilder(redis_FxzfInfo other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for redis_FxzfInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<redis_FxzfInfo>
    implements org.apache.avro.data.RecordBuilder<redis_FxzfInfo> {

    private CharSequence sDetectStation;
    private CharSequence sLane;
    private CharSequence sWeight;
    private CharSequence sSpeed;
    private CharSequence sAxisCount;
    private CharSequence sOverloadStatus;
    private CharSequence sOverloadPercent;
    private CharSequence sCarModel;
    private CharSequence sCaptureTime;
    private CharSequence sCarDirection;
    private CharSequence sHeadLicense;
    private CharSequence sHeadLicensePicDir;
    private CharSequence sHeadCarPicDir;
    private CharSequence sHeadLicenseZxd;
    private CharSequence sHeadLicenseColor;
    private CharSequence sTailLicense;
    private CharSequence sTailLicensePicDir;
    private CharSequence sTailCarPicDir;
    private CharSequence sTailLicenseZxd;
    private CharSequence sTailLicenseColor;
    private CharSequence sCarLength;
    private CharSequence sCarWidth;
    private CharSequence sCarHeight;
    private CharSequence sOverWeight;
    private CharSequence sMaxWheelBase;
    private CharSequence sAxisWeight;
    private CharSequence sParameter3;

    /** Creates a new Builder */
    private Builder() {
      super(redis_FxzfInfo.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sDetectStation)) {
        this.sDetectStation = data().deepCopy(fields()[0].schema(), other.sDetectStation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sLane)) {
        this.sLane = data().deepCopy(fields()[1].schema(), other.sLane);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sWeight)) {
        this.sWeight = data().deepCopy(fields()[2].schema(), other.sWeight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sSpeed)) {
        this.sSpeed = data().deepCopy(fields()[3].schema(), other.sSpeed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sAxisCount)) {
        this.sAxisCount = data().deepCopy(fields()[4].schema(), other.sAxisCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sOverloadStatus)) {
        this.sOverloadStatus = data().deepCopy(fields()[5].schema(), other.sOverloadStatus);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sOverloadPercent)) {
        this.sOverloadPercent = data().deepCopy(fields()[6].schema(), other.sOverloadPercent);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sCarModel)) {
        this.sCarModel = data().deepCopy(fields()[7].schema(), other.sCarModel);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sCaptureTime)) {
        this.sCaptureTime = data().deepCopy(fields()[8].schema(), other.sCaptureTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sCarDirection)) {
        this.sCarDirection = data().deepCopy(fields()[9].schema(), other.sCarDirection);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sHeadLicense)) {
        this.sHeadLicense = data().deepCopy(fields()[10].schema(), other.sHeadLicense);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sHeadLicensePicDir)) {
        this.sHeadLicensePicDir = data().deepCopy(fields()[11].schema(), other.sHeadLicensePicDir);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sHeadCarPicDir)) {
        this.sHeadCarPicDir = data().deepCopy(fields()[12].schema(), other.sHeadCarPicDir);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sHeadLicenseZxd)) {
        this.sHeadLicenseZxd = data().deepCopy(fields()[13].schema(), other.sHeadLicenseZxd);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sHeadLicenseColor)) {
        this.sHeadLicenseColor = data().deepCopy(fields()[14].schema(), other.sHeadLicenseColor);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sTailLicense)) {
        this.sTailLicense = data().deepCopy(fields()[15].schema(), other.sTailLicense);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sTailLicensePicDir)) {
        this.sTailLicensePicDir = data().deepCopy(fields()[16].schema(), other.sTailLicensePicDir);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.sTailCarPicDir)) {
        this.sTailCarPicDir = data().deepCopy(fields()[17].schema(), other.sTailCarPicDir);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.sTailLicenseZxd)) {
        this.sTailLicenseZxd = data().deepCopy(fields()[18].schema(), other.sTailLicenseZxd);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.sTailLicenseColor)) {
        this.sTailLicenseColor = data().deepCopy(fields()[19].schema(), other.sTailLicenseColor);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.sCarLength)) {
        this.sCarLength = data().deepCopy(fields()[20].schema(), other.sCarLength);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.sCarWidth)) {
        this.sCarWidth = data().deepCopy(fields()[21].schema(), other.sCarWidth);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.sCarHeight)) {
        this.sCarHeight = data().deepCopy(fields()[22].schema(), other.sCarHeight);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.sOverWeight)) {
        this.sOverWeight = data().deepCopy(fields()[23].schema(), other.sOverWeight);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sMaxWheelBase)) {
        this.sMaxWheelBase = data().deepCopy(fields()[24].schema(), other.sMaxWheelBase);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.sAxisWeight)) {
        this.sAxisWeight = data().deepCopy(fields()[25].schema(), other.sAxisWeight);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.sParameter3)) {
        this.sParameter3 = data().deepCopy(fields()[26].schema(), other.sParameter3);
        fieldSetFlags()[26] = true;
      }
    }
    
    /** Creates a Builder by copying an existing redis_FxzfInfo instance */
    private Builder(redis_FxzfInfo other) {
            super(redis_FxzfInfo.SCHEMA$);
      if (isValidValue(fields()[0], other.sDetectStation)) {
        this.sDetectStation = data().deepCopy(fields()[0].schema(), other.sDetectStation);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sLane)) {
        this.sLane = data().deepCopy(fields()[1].schema(), other.sLane);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sWeight)) {
        this.sWeight = data().deepCopy(fields()[2].schema(), other.sWeight);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sSpeed)) {
        this.sSpeed = data().deepCopy(fields()[3].schema(), other.sSpeed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sAxisCount)) {
        this.sAxisCount = data().deepCopy(fields()[4].schema(), other.sAxisCount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sOverloadStatus)) {
        this.sOverloadStatus = data().deepCopy(fields()[5].schema(), other.sOverloadStatus);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sOverloadPercent)) {
        this.sOverloadPercent = data().deepCopy(fields()[6].schema(), other.sOverloadPercent);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sCarModel)) {
        this.sCarModel = data().deepCopy(fields()[7].schema(), other.sCarModel);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sCaptureTime)) {
        this.sCaptureTime = data().deepCopy(fields()[8].schema(), other.sCaptureTime);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.sCarDirection)) {
        this.sCarDirection = data().deepCopy(fields()[9].schema(), other.sCarDirection);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.sHeadLicense)) {
        this.sHeadLicense = data().deepCopy(fields()[10].schema(), other.sHeadLicense);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sHeadLicensePicDir)) {
        this.sHeadLicensePicDir = data().deepCopy(fields()[11].schema(), other.sHeadLicensePicDir);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.sHeadCarPicDir)) {
        this.sHeadCarPicDir = data().deepCopy(fields()[12].schema(), other.sHeadCarPicDir);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.sHeadLicenseZxd)) {
        this.sHeadLicenseZxd = data().deepCopy(fields()[13].schema(), other.sHeadLicenseZxd);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.sHeadLicenseColor)) {
        this.sHeadLicenseColor = data().deepCopy(fields()[14].schema(), other.sHeadLicenseColor);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.sTailLicense)) {
        this.sTailLicense = data().deepCopy(fields()[15].schema(), other.sTailLicense);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.sTailLicensePicDir)) {
        this.sTailLicensePicDir = data().deepCopy(fields()[16].schema(), other.sTailLicensePicDir);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.sTailCarPicDir)) {
        this.sTailCarPicDir = data().deepCopy(fields()[17].schema(), other.sTailCarPicDir);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.sTailLicenseZxd)) {
        this.sTailLicenseZxd = data().deepCopy(fields()[18].schema(), other.sTailLicenseZxd);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.sTailLicenseColor)) {
        this.sTailLicenseColor = data().deepCopy(fields()[19].schema(), other.sTailLicenseColor);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.sCarLength)) {
        this.sCarLength = data().deepCopy(fields()[20].schema(), other.sCarLength);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.sCarWidth)) {
        this.sCarWidth = data().deepCopy(fields()[21].schema(), other.sCarWidth);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.sCarHeight)) {
        this.sCarHeight = data().deepCopy(fields()[22].schema(), other.sCarHeight);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.sOverWeight)) {
        this.sOverWeight = data().deepCopy(fields()[23].schema(), other.sOverWeight);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.sMaxWheelBase)) {
        this.sMaxWheelBase = data().deepCopy(fields()[24].schema(), other.sMaxWheelBase);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.sAxisWeight)) {
        this.sAxisWeight = data().deepCopy(fields()[25].schema(), other.sAxisWeight);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.sParameter3)) {
        this.sParameter3 = data().deepCopy(fields()[26].schema(), other.sParameter3);
        fieldSetFlags()[26] = true;
      }
    }

    /** Gets the value of the 'sDetectStation' field */
    public CharSequence getSDetectStation() {
      return sDetectStation;
    }
    
    /** Sets the value of the 'sDetectStation' field */
    public Builder setSDetectStation(CharSequence value) {
      validate(fields()[0], value);
      this.sDetectStation = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sDetectStation' field has been set */
    public boolean hasSDetectStation() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sDetectStation' field */
    public Builder clearSDetectStation() {
      sDetectStation = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sLane' field */
    public CharSequence getSLane() {
      return sLane;
    }
    
    /** Sets the value of the 'sLane' field */
    public Builder setSLane(CharSequence value) {
      validate(fields()[1], value);
      this.sLane = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sLane' field has been set */
    public boolean hasSLane() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sLane' field */
    public Builder clearSLane() {
      sLane = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'sWeight' field */
    public CharSequence getSWeight() {
      return sWeight;
    }
    
    /** Sets the value of the 'sWeight' field */
    public Builder setSWeight(CharSequence value) {
      validate(fields()[2], value);
      this.sWeight = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'sWeight' field has been set */
    public boolean hasSWeight() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'sWeight' field */
    public Builder clearSWeight() {
      sWeight = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'sSpeed' field */
    public CharSequence getSSpeed() {
      return sSpeed;
    }
    
    /** Sets the value of the 'sSpeed' field */
    public Builder setSSpeed(CharSequence value) {
      validate(fields()[3], value);
      this.sSpeed = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'sSpeed' field has been set */
    public boolean hasSSpeed() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'sSpeed' field */
    public Builder clearSSpeed() {
      sSpeed = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'sAxisCount' field */
    public CharSequence getSAxisCount() {
      return sAxisCount;
    }
    
    /** Sets the value of the 'sAxisCount' field */
    public Builder setSAxisCount(CharSequence value) {
      validate(fields()[4], value);
      this.sAxisCount = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'sAxisCount' field has been set */
    public boolean hasSAxisCount() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'sAxisCount' field */
    public Builder clearSAxisCount() {
      sAxisCount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'sOverloadStatus' field */
    public CharSequence getSOverloadStatus() {
      return sOverloadStatus;
    }
    
    /** Sets the value of the 'sOverloadStatus' field */
    public Builder setSOverloadStatus(CharSequence value) {
      validate(fields()[5], value);
      this.sOverloadStatus = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'sOverloadStatus' field has been set */
    public boolean hasSOverloadStatus() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'sOverloadStatus' field */
    public Builder clearSOverloadStatus() {
      sOverloadStatus = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sOverloadPercent' field */
    public CharSequence getSOverloadPercent() {
      return sOverloadPercent;
    }
    
    /** Sets the value of the 'sOverloadPercent' field */
    public Builder setSOverloadPercent(CharSequence value) {
      validate(fields()[6], value);
      this.sOverloadPercent = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sOverloadPercent' field has been set */
    public boolean hasSOverloadPercent() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sOverloadPercent' field */
    public Builder clearSOverloadPercent() {
      sOverloadPercent = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'sCarModel' field */
    public CharSequence getSCarModel() {
      return sCarModel;
    }
    
    /** Sets the value of the 'sCarModel' field */
    public Builder setSCarModel(CharSequence value) {
      validate(fields()[7], value);
      this.sCarModel = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'sCarModel' field has been set */
    public boolean hasSCarModel() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'sCarModel' field */
    public Builder clearSCarModel() {
      sCarModel = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'sCaptureTime' field */
    public CharSequence getSCaptureTime() {
      return sCaptureTime;
    }
    
    /** Sets the value of the 'sCaptureTime' field */
    public Builder setSCaptureTime(CharSequence value) {
      validate(fields()[8], value);
      this.sCaptureTime = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'sCaptureTime' field has been set */
    public boolean hasSCaptureTime() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'sCaptureTime' field */
    public Builder clearSCaptureTime() {
      sCaptureTime = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'sCarDirection' field */
    public CharSequence getSCarDirection() {
      return sCarDirection;
    }
    
    /** Sets the value of the 'sCarDirection' field */
    public Builder setSCarDirection(CharSequence value) {
      validate(fields()[9], value);
      this.sCarDirection = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'sCarDirection' field has been set */
    public boolean hasSCarDirection() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'sCarDirection' field */
    public Builder clearSCarDirection() {
      sCarDirection = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'sHeadLicense' field */
    public CharSequence getSHeadLicense() {
      return sHeadLicense;
    }
    
    /** Sets the value of the 'sHeadLicense' field */
    public Builder setSHeadLicense(CharSequence value) {
      validate(fields()[10], value);
      this.sHeadLicense = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'sHeadLicense' field has been set */
    public boolean hasSHeadLicense() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'sHeadLicense' field */
    public Builder clearSHeadLicense() {
      sHeadLicense = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'sHeadLicensePicDir' field */
    public CharSequence getSHeadLicensePicDir() {
      return sHeadLicensePicDir;
    }
    
    /** Sets the value of the 'sHeadLicensePicDir' field */
    public Builder setSHeadLicensePicDir(CharSequence value) {
      validate(fields()[11], value);
      this.sHeadLicensePicDir = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'sHeadLicensePicDir' field has been set */
    public boolean hasSHeadLicensePicDir() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'sHeadLicensePicDir' field */
    public Builder clearSHeadLicensePicDir() {
      sHeadLicensePicDir = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'sHeadCarPicDir' field */
    public CharSequence getSHeadCarPicDir() {
      return sHeadCarPicDir;
    }
    
    /** Sets the value of the 'sHeadCarPicDir' field */
    public Builder setSHeadCarPicDir(CharSequence value) {
      validate(fields()[12], value);
      this.sHeadCarPicDir = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'sHeadCarPicDir' field has been set */
    public boolean hasSHeadCarPicDir() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'sHeadCarPicDir' field */
    public Builder clearSHeadCarPicDir() {
      sHeadCarPicDir = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'sHeadLicenseZxd' field */
    public CharSequence getSHeadLicenseZxd() {
      return sHeadLicenseZxd;
    }
    
    /** Sets the value of the 'sHeadLicenseZxd' field */
    public Builder setSHeadLicenseZxd(CharSequence value) {
      validate(fields()[13], value);
      this.sHeadLicenseZxd = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'sHeadLicenseZxd' field has been set */
    public boolean hasSHeadLicenseZxd() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'sHeadLicenseZxd' field */
    public Builder clearSHeadLicenseZxd() {
      sHeadLicenseZxd = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'sHeadLicenseColor' field */
    public CharSequence getSHeadLicenseColor() {
      return sHeadLicenseColor;
    }
    
    /** Sets the value of the 'sHeadLicenseColor' field */
    public Builder setSHeadLicenseColor(CharSequence value) {
      validate(fields()[14], value);
      this.sHeadLicenseColor = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'sHeadLicenseColor' field has been set */
    public boolean hasSHeadLicenseColor() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'sHeadLicenseColor' field */
    public Builder clearSHeadLicenseColor() {
      sHeadLicenseColor = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'sTailLicense' field */
    public CharSequence getSTailLicense() {
      return sTailLicense;
    }
    
    /** Sets the value of the 'sTailLicense' field */
    public Builder setSTailLicense(CharSequence value) {
      validate(fields()[15], value);
      this.sTailLicense = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'sTailLicense' field has been set */
    public boolean hasSTailLicense() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'sTailLicense' field */
    public Builder clearSTailLicense() {
      sTailLicense = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'sTailLicensePicDir' field */
    public CharSequence getSTailLicensePicDir() {
      return sTailLicensePicDir;
    }
    
    /** Sets the value of the 'sTailLicensePicDir' field */
    public Builder setSTailLicensePicDir(CharSequence value) {
      validate(fields()[16], value);
      this.sTailLicensePicDir = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'sTailLicensePicDir' field has been set */
    public boolean hasSTailLicensePicDir() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'sTailLicensePicDir' field */
    public Builder clearSTailLicensePicDir() {
      sTailLicensePicDir = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'sTailCarPicDir' field */
    public CharSequence getSTailCarPicDir() {
      return sTailCarPicDir;
    }
    
    /** Sets the value of the 'sTailCarPicDir' field */
    public Builder setSTailCarPicDir(CharSequence value) {
      validate(fields()[17], value);
      this.sTailCarPicDir = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'sTailCarPicDir' field has been set */
    public boolean hasSTailCarPicDir() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'sTailCarPicDir' field */
    public Builder clearSTailCarPicDir() {
      sTailCarPicDir = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'sTailLicenseZxd' field */
    public CharSequence getSTailLicenseZxd() {
      return sTailLicenseZxd;
    }
    
    /** Sets the value of the 'sTailLicenseZxd' field */
    public Builder setSTailLicenseZxd(CharSequence value) {
      validate(fields()[18], value);
      this.sTailLicenseZxd = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'sTailLicenseZxd' field has been set */
    public boolean hasSTailLicenseZxd() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'sTailLicenseZxd' field */
    public Builder clearSTailLicenseZxd() {
      sTailLicenseZxd = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'sTailLicenseColor' field */
    public CharSequence getSTailLicenseColor() {
      return sTailLicenseColor;
    }
    
    /** Sets the value of the 'sTailLicenseColor' field */
    public Builder setSTailLicenseColor(CharSequence value) {
      validate(fields()[19], value);
      this.sTailLicenseColor = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'sTailLicenseColor' field has been set */
    public boolean hasSTailLicenseColor() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'sTailLicenseColor' field */
    public Builder clearSTailLicenseColor() {
      sTailLicenseColor = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'sCarLength' field */
    public CharSequence getSCarLength() {
      return sCarLength;
    }
    
    /** Sets the value of the 'sCarLength' field */
    public Builder setSCarLength(CharSequence value) {
      validate(fields()[20], value);
      this.sCarLength = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'sCarLength' field has been set */
    public boolean hasSCarLength() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'sCarLength' field */
    public Builder clearSCarLength() {
      sCarLength = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'sCarWidth' field */
    public CharSequence getSCarWidth() {
      return sCarWidth;
    }
    
    /** Sets the value of the 'sCarWidth' field */
    public Builder setSCarWidth(CharSequence value) {
      validate(fields()[21], value);
      this.sCarWidth = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'sCarWidth' field has been set */
    public boolean hasSCarWidth() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'sCarWidth' field */
    public Builder clearSCarWidth() {
      sCarWidth = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'sCarHeight' field */
    public CharSequence getSCarHeight() {
      return sCarHeight;
    }
    
    /** Sets the value of the 'sCarHeight' field */
    public Builder setSCarHeight(CharSequence value) {
      validate(fields()[22], value);
      this.sCarHeight = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'sCarHeight' field has been set */
    public boolean hasSCarHeight() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'sCarHeight' field */
    public Builder clearSCarHeight() {
      sCarHeight = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'sOverWeight' field */
    public CharSequence getSOverWeight() {
      return sOverWeight;
    }
    
    /** Sets the value of the 'sOverWeight' field */
    public Builder setSOverWeight(CharSequence value) {
      validate(fields()[23], value);
      this.sOverWeight = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'sOverWeight' field has been set */
    public boolean hasSOverWeight() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'sOverWeight' field */
    public Builder clearSOverWeight() {
      sOverWeight = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'sMaxWheelBase' field */
    public CharSequence getSMaxWheelBase() {
      return sMaxWheelBase;
    }
    
    /** Sets the value of the 'sMaxWheelBase' field */
    public Builder setSMaxWheelBase(CharSequence value) {
      validate(fields()[24], value);
      this.sMaxWheelBase = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'sMaxWheelBase' field has been set */
    public boolean hasSMaxWheelBase() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'sMaxWheelBase' field */
    public Builder clearSMaxWheelBase() {
      sMaxWheelBase = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'sAxisWeight' field */
    public CharSequence getSAxisWeight() {
      return sAxisWeight;
    }
    
    /** Sets the value of the 'sAxisWeight' field */
    public Builder setSAxisWeight(CharSequence value) {
      validate(fields()[25], value);
      this.sAxisWeight = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'sAxisWeight' field has been set */
    public boolean hasSAxisWeight() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'sAxisWeight' field */
    public Builder clearSAxisWeight() {
      sAxisWeight = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'sParameter3' field */
    public CharSequence getSParameter3() {
      return sParameter3;
    }
    
    /** Sets the value of the 'sParameter3' field */
    public Builder setSParameter3(CharSequence value) {
      validate(fields()[26], value);
      this.sParameter3 = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'sParameter3' field has been set */
    public boolean hasSParameter3() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'sParameter3' field */
    public Builder clearSParameter3() {
      sParameter3 = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    @Override
    public redis_FxzfInfo build() {
      try {
        redis_FxzfInfo record = new redis_FxzfInfo();
        record.sDetectStation = fieldSetFlags()[0] ? this.sDetectStation : (CharSequence) defaultValue(fields()[0]);
        record.sLane = fieldSetFlags()[1] ? this.sLane : (CharSequence) defaultValue(fields()[1]);
        record.sWeight = fieldSetFlags()[2] ? this.sWeight : (CharSequence) defaultValue(fields()[2]);
        record.sSpeed = fieldSetFlags()[3] ? this.sSpeed : (CharSequence) defaultValue(fields()[3]);
        record.sAxisCount = fieldSetFlags()[4] ? this.sAxisCount : (CharSequence) defaultValue(fields()[4]);
        record.sOverloadStatus = fieldSetFlags()[5] ? this.sOverloadStatus : (CharSequence) defaultValue(fields()[5]);
        record.sOverloadPercent = fieldSetFlags()[6] ? this.sOverloadPercent : (CharSequence) defaultValue(fields()[6]);
        record.sCarModel = fieldSetFlags()[7] ? this.sCarModel : (CharSequence) defaultValue(fields()[7]);
        record.sCaptureTime = fieldSetFlags()[8] ? this.sCaptureTime : (CharSequence) defaultValue(fields()[8]);
        record.sCarDirection = fieldSetFlags()[9] ? this.sCarDirection : (CharSequence) defaultValue(fields()[9]);
        record.sHeadLicense = fieldSetFlags()[10] ? this.sHeadLicense : (CharSequence) defaultValue(fields()[10]);
        record.sHeadLicensePicDir = fieldSetFlags()[11] ? this.sHeadLicensePicDir : (CharSequence) defaultValue(fields()[11]);
        record.sHeadCarPicDir = fieldSetFlags()[12] ? this.sHeadCarPicDir : (CharSequence) defaultValue(fields()[12]);
        record.sHeadLicenseZxd = fieldSetFlags()[13] ? this.sHeadLicenseZxd : (CharSequence) defaultValue(fields()[13]);
        record.sHeadLicenseColor = fieldSetFlags()[14] ? this.sHeadLicenseColor : (CharSequence) defaultValue(fields()[14]);
        record.sTailLicense = fieldSetFlags()[15] ? this.sTailLicense : (CharSequence) defaultValue(fields()[15]);
        record.sTailLicensePicDir = fieldSetFlags()[16] ? this.sTailLicensePicDir : (CharSequence) defaultValue(fields()[16]);
        record.sTailCarPicDir = fieldSetFlags()[17] ? this.sTailCarPicDir : (CharSequence) defaultValue(fields()[17]);
        record.sTailLicenseZxd = fieldSetFlags()[18] ? this.sTailLicenseZxd : (CharSequence) defaultValue(fields()[18]);
        record.sTailLicenseColor = fieldSetFlags()[19] ? this.sTailLicenseColor : (CharSequence) defaultValue(fields()[19]);
        record.sCarLength = fieldSetFlags()[20] ? this.sCarLength : (CharSequence) defaultValue(fields()[20]);
        record.sCarWidth = fieldSetFlags()[21] ? this.sCarWidth : (CharSequence) defaultValue(fields()[21]);
        record.sCarHeight = fieldSetFlags()[22] ? this.sCarHeight : (CharSequence) defaultValue(fields()[22]);
        record.sOverWeight = fieldSetFlags()[23] ? this.sOverWeight : (CharSequence) defaultValue(fields()[23]);
        record.sMaxWheelBase = fieldSetFlags()[24] ? this.sMaxWheelBase : (CharSequence) defaultValue(fields()[24]);
        record.sAxisWeight = fieldSetFlags()[25] ? this.sAxisWeight : (CharSequence) defaultValue(fields()[25]);
        record.sParameter3 = fieldSetFlags()[26] ? this.sParameter3 : (CharSequence) defaultValue(fields()[26]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
